# .NET
*.csproj
*.user
*.suo
*.cache
*.vspscc
*.vssscc
*.nupkg
*.log
*.userprefs
*.pidb
*.user
*.suo
*.sln.docstates
*.sln.ide
*.bak
*.bak.*
TestResults/
[TestrR]esult*/
[Nn]u[Gg]et/
*.ReSharper*
*.DotSettings*
*.sln.DotSettings
*.ReSharper.user
_ReSharper.*
Thumbs.db
ipch/
obj/
bin/
artifacts/
project.lock.json
*.sln.Ernest
[Rr]elease[Bb]in/
[Rr]elease/
[Rr]elease[Oo]bj/
[Pp]ackages/
[Bb]uild/
[Bb]uild[Ss]cript/
publish/
UpgradeLog*.htm
Results/
[Tt]est[Rr]esult*
*.publishsettings
*.pfx
*.Publish.xml
Session.vim
.vscode/
.vs/
*.jfm
*.local
*.local.*
.azds/
_*
# Local .terraform directories
infrastructure/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc